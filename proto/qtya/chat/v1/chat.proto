syntax = "proto3";

import "google/protobuf/descriptor.proto";
import "qtya/core/v1/prototime.proto";

package qtya.chat.v1;

option go_package = "github.com/qtyapp/qtya_proto/qtya/chat/v1;chatv1";
option (version) = "1.0.0";

extend google.protobuf.FileOptions { string version = 50001; }
extend google.protobuf.EnumValueOptions { optional string string_name = 50000; }
extend google.protobuf.MessageOptions {
  optional string description = 50002;
  repeated string usages = 50003;
}

// UpdateTarget
enum UpdateTarget {
  UPDATE_TARGET_UNSPECIFIED = 0 [ deprecated = true ];
  UPDATE_TARGET_MESSAGE = 1 [ (string_name) = "message" ];
  UPDATE_TARGET_USER = 2 [ (string_name) = "user" ];
  UPDATE_TARGET_USER_PRESENCE = 3 [ (string_name) = "presence" ];
  UPDATE_TARGET_CALL_CONTEXT = 4 [ (string_name) = "call" ];
}

// MessageType
enum MessageType {
  MESSAGE_TYPE_UNSPECIFIED = 0;
  MESSAGE_TYPE_TEXT = 1 [ (string_name) = "text" ];
  MESSAGE_TYPE_IMAGE = 2 [ (string_name) = "image" ];
  MESSAGE_TYPE_VOICE = 3 [ (string_name) = "voice" ];
  MESSAGE_TYPE_CALL = 4 [ (string_name) = "call" ];
}

// MessageReaction
message MessageReaction {
  string user_id = 1;
  string emoji = 2;
  qtya.core.v1.ProtoTime updated_at = 3;
}

message MessageAttachment {
  string type = 1;
  bytes payload = 2;
}

// ChatMessageUpdate
message ChatMessage {
  string message_id = 1;
  string conversation_id = 2;
  bytes payload = 3;
  string sender_id = 4;
  qtya.core.v1.ProtoTime sent_at = 5;
  repeated MessageReaction reactions = 6;
  optional qtya.core.v1.ProtoTime deleted_at = 7;
  optional string deleted_by = 8;
  string message_type = 9;
  optional qtya.core.v1.ProtoTime seen_at = 10;
  repeated MessageAttachment attachments = 11;
  // TODO: add additional data
}

// TODO: rename it to buddy?
// Contact primitive
message Buddy {
  string id = 1;
  string name = 2;
  string email = 3;
  optional string picture = 4;
  qtya.core.v1.ProtoTime registered_at = 8;
  qtya.core.v1.ProtoTime last_online = 9;
  optional string qtya_id = 10;
}

message Conversation {
  // Id of the conversation
  string cid = 1;
  // Name of the conversation, the default name is the chat partner
  optional string name = 2;
  // Last sent message
  string last_message = 3;
  // Last message delivery time
  qtya.core.v1.ProtoTime last_message_at = 4;
  // Is this delivered to the client (requested at least once)
  bool delivered = 5;
  // Picture of the conversation
  optional string picture = 6;
  // UserID list of the members
  repeated string participants = 7;
}

message UserPresence {
  // ID of the user
  string user_id = 1;
  // Is online or not
  bool is_online = 2;
  // Status message (online/away/in-call)
  string status = 3;
  // Status message
  optional string status_message = 4;
  // Status icon (emoji or :smile: pre-defined emoji)
  optional string status_icon = 5;
  // Last online time
  qtya.core.v1.ProtoTime last_online_at = 6;
}

message UpdateRequestMessage {
  repeated string user_ids = 1;
  repeated string user_presence = 2;
  repeated string conversations = 3;
}

// ListConversationsRequest requests the list of the conversations for the user.
message ListConversationsRequest { 
  // Deprecated: the token will provide the actual user ID so this is not necessary anymore.
  optional string user_id = 1; 
}

// SendMessageRequest sends a message to the conversation.
message SendMessageRequest {
  string cid = 1;
  string payload_type = 2;
  bytes payload = 3;
}

//// UpdateReadMarkerRequest updates the read marker for the conversation.
//message UpdateReadMarkerRequest {
//  string conversation_id = 1;
//  string last_message_id = 2;
//}

// UpdateConversationRequest 
message UpdateConversationRequest {
  string conversation_id = 1;
  optional string from = 2;
  uint32 limit = 3;
}

// SelfUpdateResponse update profile and presence.
message SelfUpdateResponse {
  Buddy my_profile = 1;
  UserPresence my_presence =  2;
}

// NotificationUpdate notification display status update message.
message NotificationUpdate {
  uint32 notification_count = 1;
  uint32 missed_calls = 2;
  uint32 unread_messages = 3;
  uint32 invitations = 4;
}

// TypingState typing indicator for the user when typing.
message TypingState {
  string user_id = 1;
  bool is_typing = 2;
}

// TypingUpdateResponse typing status update message.
message TypingUpdateResponse {
  // ConversationID is the ID of the conversation
  string conversation_id = 1;

  // States is the typing states of the users
  repeated TypingState states = 2;
}

// ChatMessageUpdateResponse chat message update request. This is useful for
// updating existing messages, or adding new messages to the conversation.
message ChatMessageUpdateResponse {
  repeated ChatMessage messages = 1;
  bool is_new = 2;
}

// EventStreamRequest subscribes the updates for the current user.
// The client can send the request to the server to get the updates.
message EventStreamRequest {
  oneof request {
    SendMessageRequest send_message_request = 1;
    UpdateRequestMessage update_request = 2;
    UserPresence update_presence = 3;
    ListConversationsRequest conversations_request = 4;
    UpdateConversationRequest update_conversation_request = 5;
//    UpdateReadMarkerRequest update_read_marker_request = 6;
    TypingRequest typing_request = 7;
  }
}

// ServerUpdateMessage server message
message EventStreamResponse {
  oneof update {
    ChatMessageUpdateResponse message_update = 2;
    Buddy contact_update = 3;
    UserPresence presence_update = 4;
    Conversation conversation_update = 5;
    SelfUpdateResponse self_update = 6;
    NotificationUpdate notification_update = 7;
    TypingUpdateResponse typing_update = 8;
  }
}

// TypingRequest request for the typing status.
message TypingRequest {
  string conversation_id = 2;
  bool is_typing = 3;
}

message RegisterRequest {
  repeated string roles = 1;
}

message RegisterResponse {
  string user_id = 1;
  string token = 2;
}

// ChatService is the chat service for the Qtya.
service ChatService {
  rpc Register(RegisterRequest) returns (RegisterResponse) {};
  rpc EventStream(stream EventStreamRequest) returns (stream EventStreamResponse) {};
}
