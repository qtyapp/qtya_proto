syntax = "proto3";

import "google/protobuf/descriptor.proto";
import "qtya/core/v1/prototime.proto";

package qtya.chat.v1;

option go_package = "github.com/qtyapp/qtya_proto/qtya/chat/v1;chatv1";
option (version) = "1.0.0";

extend google.protobuf.FileOptions { string version = 50001; }
extend google.protobuf.EnumValueOptions { optional string string_name = 50000; }
extend google.protobuf.MessageOptions {
  optional string description = 50002;
  repeated string usages = 50003;
}

// UpdateTarget
enum UpdateTarget {
  UPDATE_TARGET_UNSPECIFIED = 0 [ deprecated = true ];
  UPDATE_TARGET_MESSAGE = 1 [ (string_name) = "message" ];
  UPDATE_TARGET_USER = 2 [ (string_name) = "user" ];
  UPDATE_TARGET_USER_PRESENCE = 3 [ (string_name) = "presence" ];
  UPDATE_TARGET_CALL_CONTEXT = 4 [ (string_name) = "call" ];
}

// MessageType
enum MessageType {
  MESSAGE_TYPE_UNSPECIFIED = 0;
  MESSAGE_TYPE_TEXT = 1 [ (string_name) = "text" ];
  MESSAGE_TYPE_IMAGE = 2 [ (string_name) = "image" ];
  MESSAGE_TYPE_VOICE = 3 [ (string_name) = "voice" ];
  MESSAGE_TYPE_CALL = 4 [ (string_name) = "call" ];
}

// MessageReaction
message MessageReaction {
  string user_id = 1;
  string emoji = 2;
  qtya.core.v1.ProtoTime updated_at = 3;
}

// ChatMessageUpdate
message ChatMessage {
  string message_id = 1;
  string conversation_id = 2;
  string message = 3;
  string sender_id = 4;
  qtya.core.v1.ProtoTime sent_at = 5;
  repeated MessageReaction reactions = 6;
  optional qtya.core.v1.ProtoTime deleted_at = 7;
  optional string deleted_by = 8;
  string message_type = 9;
  optional qtya.core.v1.ProtoTime seen_at = 10;
  // TODO: add additional data
}

// Contact primitive
message Contact {
  string user_id = 1;
  string name = 2;
  string email = 3;
  optional string profile_picture = 4;
  string role = 5;
  optional string tel = 6;
  optional string city = 7;
  qtya.core.v1.ProtoTime registered_at = 8;
  qtya.core.v1.ProtoTime last_online = 9;
  optional string qtya_id = 10;
}

// ReadMarker
message ReadMarker {
  // User read marker
  string user_id = 1;
  // Position of the marker
  string message_id = 2;
}

message Conversation {
  // Id of the conversation
  string conversation_id = 1;
  // Name of the conversation, the default name is the chat partner
  optional string name = 2;
  // Last sent message
  string last_message = 3;
  // Last message delivery time
  qtya.core.v1.ProtoTime last_message_at = 4;
  // Is this delivered to the client (requested at least once)
  bool delivered = 5;
  // Picture of the conversation
  optional string custom_picture_url = 6;
  // UserID list of the members
  repeated string participants = 7;
  // Read markers
  repeated ReadMarker read_markers = 8;
  // Unreaded count
  uint32 unreaded = 10;
}

message UserPresence {
  // ID of the user
  string user_id = 1;
  // Is online or not
  bool is_online = 2;
  // Status message (online/away/in-call)
  string status = 3;
  // Status message
  optional string status_message = 4;
  // Status icon (emoji or :smile: pre-defined emoji)
  optional string status_icon = 5;
  // Last online time
  qtya.core.v1.ProtoTime last_online_at = 6;
}

message UpdateRequestMessage {
  repeated string user_ids = 1;
  repeated string user_presence = 2;
  repeated string conversations = 3;
}

message ListConversationsRequest { string user_id = 1; }

message SendMessageRequest {
  string user_id = 1;
  string conversation_id = 2;
  string text = 3;
  MessageType message_type = 4;
}

message UpdateReadMarkerRequest {
  string conversation_id = 1;
  string last_message_id = 2;
}

// UpdateConversationRequest 
message UpdateConversationRequest {
  string conversation_id = 1;
  optional string from = 2;
  uint32 limit = 3;
}

message SelfUpdateResponse {
  Contact my_profile = 1;
  UserPresence my_presence =  2;
}

message NotificationUpdate {
  uint32 notification_count = 1;
  uint32 missed_calls = 2;
  uint32 unreaded_messages = 3;
  uint32 invitations = 4;
}

message ChatMessageUpdateResponse {
  repeated ChatMessage messages = 1;
  bool is_new = 2;
}

// EventStreamRequest ...
message EventStreamRequest {
  oneof request {
    SendMessageRequest send_message_request = 1;
    UpdateRequestMessage update_request = 2;
    UserPresence update_presence = 3;
    ListConversationsRequest conversations_request = 4;
    UpdateConversationRequest update_conversation_request = 5;
  }
}

// ServerUpdateMessage servermessage
message EventStreamResponse {
  oneof update {
    ChatMessageUpdateResponse message_update = 2;
    Contact contact_update = 3;
    UserPresence presence_update = 4;
    Conversation conversation_update = 5;
    SelfUpdateResponse self_update = 6;
    NotificationUpdate notification_update = 7;
  }
}

// AuthenticateRequest
message AuthenticateRequest { optional string token = 2; }

// AuthenticateResponse
message AuthenticateResponse {
  bool success = 1;
  optional string reason = 2;
}

// ChatService
service ChatService {
  rpc Authenticate(AuthenticateRequest) returns (AuthenticateResponse) {};
  rpc EventStream(stream EventStreamRequest)
      returns (stream EventStreamResponse) {};
}
