# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from qtya.detect import train_service_pb2 as qtya_dot_detect_dot_train__service__pb2


class DetectServiceStub(object):
    """DetectService is a service that can be used to control the qtya cam app.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.DetectRemote = channel.stream_stream(
                '/qtya.detect.DetectService/DetectRemote',
                request_serializer=qtya_dot_detect_dot_train__service__pb2.DetectRemoteRequest.SerializeToString,
                response_deserializer=qtya_dot_detect_dot_train__service__pb2.DetectRemoteResponse.FromString,
                )


class DetectServiceServicer(object):
    """DetectService is a service that can be used to control the qtya cam app.
    """

    def DetectRemote(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DetectServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'DetectRemote': grpc.stream_stream_rpc_method_handler(
                    servicer.DetectRemote,
                    request_deserializer=qtya_dot_detect_dot_train__service__pb2.DetectRemoteRequest.FromString,
                    response_serializer=qtya_dot_detect_dot_train__service__pb2.DetectRemoteResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'qtya.detect.DetectService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DetectService(object):
    """DetectService is a service that can be used to control the qtya cam app.
    """

    @staticmethod
    def DetectRemote(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/qtya.detect.DetectService/DetectRemote',
            qtya_dot_detect_dot_train__service__pb2.DetectRemoteRequest.SerializeToString,
            qtya_dot_detect_dot_train__service__pb2.DetectRemoteResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
