// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: qtya/chat/v2/realtime.proto

package chatv2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RealtimeService_ListenEvents_FullMethodName = "/qtya.chat.v2.RealtimeService/ListenEvents"
)

// RealtimeServiceClient is the client API for RealtimeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RealtimeServiceClient interface {
	ListenEvents(ctx context.Context, in *ListenEventsRequest, opts ...grpc.CallOption) (RealtimeService_ListenEventsClient, error)
}

type realtimeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRealtimeServiceClient(cc grpc.ClientConnInterface) RealtimeServiceClient {
	return &realtimeServiceClient{cc}
}

func (c *realtimeServiceClient) ListenEvents(ctx context.Context, in *ListenEventsRequest, opts ...grpc.CallOption) (RealtimeService_ListenEventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &RealtimeService_ServiceDesc.Streams[0], RealtimeService_ListenEvents_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &realtimeServiceListenEventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RealtimeService_ListenEventsClient interface {
	Recv() (*ListenEventsResponse, error)
	grpc.ClientStream
}

type realtimeServiceListenEventsClient struct {
	grpc.ClientStream
}

func (x *realtimeServiceListenEventsClient) Recv() (*ListenEventsResponse, error) {
	m := new(ListenEventsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RealtimeServiceServer is the server API for RealtimeService service.
// All implementations must embed UnimplementedRealtimeServiceServer
// for forward compatibility
type RealtimeServiceServer interface {
	ListenEvents(*ListenEventsRequest, RealtimeService_ListenEventsServer) error
	mustEmbedUnimplementedRealtimeServiceServer()
}

// UnimplementedRealtimeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRealtimeServiceServer struct {
}

func (UnimplementedRealtimeServiceServer) ListenEvents(*ListenEventsRequest, RealtimeService_ListenEventsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListenEvents not implemented")
}
func (UnimplementedRealtimeServiceServer) mustEmbedUnimplementedRealtimeServiceServer() {}

// UnsafeRealtimeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RealtimeServiceServer will
// result in compilation errors.
type UnsafeRealtimeServiceServer interface {
	mustEmbedUnimplementedRealtimeServiceServer()
}

func RegisterRealtimeServiceServer(s grpc.ServiceRegistrar, srv RealtimeServiceServer) {
	s.RegisterService(&RealtimeService_ServiceDesc, srv)
}

func _RealtimeService_ListenEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListenEventsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RealtimeServiceServer).ListenEvents(m, &realtimeServiceListenEventsServer{stream})
}

type RealtimeService_ListenEventsServer interface {
	Send(*ListenEventsResponse) error
	grpc.ServerStream
}

type realtimeServiceListenEventsServer struct {
	grpc.ServerStream
}

func (x *realtimeServiceListenEventsServer) Send(m *ListenEventsResponse) error {
	return x.ServerStream.SendMsg(m)
}

// RealtimeService_ServiceDesc is the grpc.ServiceDesc for RealtimeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RealtimeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "qtya.chat.v2.RealtimeService",
	HandlerType: (*RealtimeServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListenEvents",
			Handler:       _RealtimeService_ListenEvents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "qtya/chat/v2/realtime.proto",
}
