// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: qtya/detect/train_service.proto

package detect

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DetectService_DetectRemote_FullMethodName = "/qtya.detect.DetectService/DetectRemote"
)

// DetectServiceClient is the client API for DetectService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DetectServiceClient interface {
	DetectRemote(ctx context.Context, opts ...grpc.CallOption) (DetectService_DetectRemoteClient, error)
}

type detectServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDetectServiceClient(cc grpc.ClientConnInterface) DetectServiceClient {
	return &detectServiceClient{cc}
}

func (c *detectServiceClient) DetectRemote(ctx context.Context, opts ...grpc.CallOption) (DetectService_DetectRemoteClient, error) {
	stream, err := c.cc.NewStream(ctx, &DetectService_ServiceDesc.Streams[0], DetectService_DetectRemote_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &detectServiceDetectRemoteClient{stream}
	return x, nil
}

type DetectService_DetectRemoteClient interface {
	Send(*DetectRemoteRequest) error
	Recv() (*DetectRemoteResponse, error)
	grpc.ClientStream
}

type detectServiceDetectRemoteClient struct {
	grpc.ClientStream
}

func (x *detectServiceDetectRemoteClient) Send(m *DetectRemoteRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *detectServiceDetectRemoteClient) Recv() (*DetectRemoteResponse, error) {
	m := new(DetectRemoteResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DetectServiceServer is the server API for DetectService service.
// All implementations must embed UnimplementedDetectServiceServer
// for forward compatibility
type DetectServiceServer interface {
	DetectRemote(DetectService_DetectRemoteServer) error
	mustEmbedUnimplementedDetectServiceServer()
}

// UnimplementedDetectServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDetectServiceServer struct {
}

func (UnimplementedDetectServiceServer) DetectRemote(DetectService_DetectRemoteServer) error {
	return status.Errorf(codes.Unimplemented, "method DetectRemote not implemented")
}
func (UnimplementedDetectServiceServer) mustEmbedUnimplementedDetectServiceServer() {}

// UnsafeDetectServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DetectServiceServer will
// result in compilation errors.
type UnsafeDetectServiceServer interface {
	mustEmbedUnimplementedDetectServiceServer()
}

func RegisterDetectServiceServer(s grpc.ServiceRegistrar, srv DetectServiceServer) {
	s.RegisterService(&DetectService_ServiceDesc, srv)
}

func _DetectService_DetectRemote_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DetectServiceServer).DetectRemote(&detectServiceDetectRemoteServer{stream})
}

type DetectService_DetectRemoteServer interface {
	Send(*DetectRemoteResponse) error
	Recv() (*DetectRemoteRequest, error)
	grpc.ServerStream
}

type detectServiceDetectRemoteServer struct {
	grpc.ServerStream
}

func (x *detectServiceDetectRemoteServer) Send(m *DetectRemoteResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *detectServiceDetectRemoteServer) Recv() (*DetectRemoteRequest, error) {
	m := new(DetectRemoteRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DetectService_ServiceDesc is the grpc.ServiceDesc for DetectService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DetectService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "qtya.detect.DetectService",
	HandlerType: (*DetectServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "DetectRemote",
			Handler:       _DetectService_DetectRemote_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "qtya/detect/train_service.proto",
}
